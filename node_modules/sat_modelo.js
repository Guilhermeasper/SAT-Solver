/**
 * Written by Guilherme Afonso and João V. Valadares in November/2018. 
 */

// Exports a function that receive a .cnf file, extract his formula from and then test
// if the problem have a satisfying assignment, if so return true and the assignment
exports.solve = function (fileName) {
	let formula = readFormula(fileName)
	let result = doSolve(formula.clauses, formula.variables)
	return result // two fields: isSat and satisfyingAssignment
}

// Receive a file and return his variables and clauses
function readFormula(fileName) {
	var fs = require('fs')
	let text = fs.readFileSync(fileName, 'utf-8').split("\n") //  an array containing lines of text extracted from the file.
	let clauses = readClauses(text)
	let variables = readVariables(clauses)

	/* In the following line, text is passed as an argument so that the function
	is able to extract the problem specification. */
	let specOk = checkProblemSpecification(text, clauses, variables)

	let result = {
		'clauses': [],
		'variables': []
	}

	if (specOk) {
		result.clauses = clauses
		result.variables = variables
	}
	return result
}

// Receives a array of lines, search, organize and return the clauses
function readClauses(text) {
	let clauses = []
	let aux = []
	let lines = ""

	// Concatenates all lines that do not begin with 'c', 'p' or '\r'(empty lines)
	for (let i = 0; i < text.length; i++) {
		if (text[i].charAt(0) != 'c' && text[i].charAt(0) != 'p' && text[i].charAt(0) != '\r') {
			lines += " " + text[i]
		}
	}

	// Split the string containing all the clauses for each whitespace
	lines = lines.split(" ")

	// Put the variables in an auxiliary array until finds a '0'
	// When finds a '0', inserts the auxiliary array in the clauses array and empties the auxiliary
	for (let i = 0; i < lines.length; i++) {
		if (lines[i].charAt(0) != "" && lines[i].charAt(0) != '0') {
			aux.push(lines[i])
		}
		if (lines[i].charAt(0) == '0' && aux.length > 0) {
			clauses.push(aux)
			aux = []
		}
	}
	return clauses
}

// Receive the clauses and return a boolean array of variables
function readVariables(clauses) {
	let biggestValue = 0

	// Search for the variable with the highest value
	for (let i = 0; i < clauses.length; i++) {
		for (let j = 0; j < clauses[i].length; j++) {
			if (Math.abs(clauses[i][j] > biggestValue)) {
				biggestValue = Math.abs(clauses[i][j])
			}
		}
	}

	// Fill the array of variables with biggestValue size with boolean value, false
	let variables = Array(biggestValue).fill(false)

	return variables
}

// Checks if the problem specification is ok or none
function checkProblemSpecification(text, clauses, variables) {
	let clausesLength
	let variablesLength
	let noSpecification = true

	// Search for a line of the file containing 'p'
	for (let i = 0; i < text.length; i++) {
		let lineText = text[i]
		if (lineText.charAt(0) == 'p') {

			/* If found a line starting with 'p' set noSpecification to false
			and get the problem specification */
			noSpecification = false
			variablesLength = lineText.split(" ")[2]
			clausesLength = lineText.split(" ")[3]
		}
	}

	/* Checks if the amount of clauses and variables matches 
	with the problem specification or if has no specification */
	if ((variables.length == variablesLength && clauses.length == clausesLength) || noSpecification) {
		return true
	} else {
		return false
	}
}


// Checks whether the assignment satisfies the clause or not
function doSolve(clauses, assignment) {
	let isSat = false
	let last = Math.pow(2, assignment.length)
	let counter = 0;
	// Checks if is SAT until find the SAT assignment or reach the maximum number of assignments
	while ((!isSat) && counter < last && last > 1) {
		/* //Shows the progress of the program and in which assignment is it, uncomment for use
		console.log("Analisando atribuição "+assignment.toString().replace(/,/g," ")+"\n"+(counter)+" de "+end)
		*/
		let allClauses = true
		for (i = 0; i < clauses.length && allClauses; i++) {
			let thisClause = false
			for (j = 0; j < clauses[i].length && !thisClause; j++) {
				// Get the index of the current assignment for the current variable
				let index = Math.abs(clauses[i][j]) - 1
				// Checks if the current variable is denied
				if (parseInt(clauses[i][j]) < 0) {
					// If the variable is denied check if the current assignment is false
					if (!assignment[index]) {
						thisClause = true
					}
				} else {
					// If the variable is not denied check if the current assignment is true
					if (assignment[index]) {
						thisClause = true
					}
				}
			}
			// If the current clause is false, stop checking the current assignment
			if (!thisClause) {
				allClauses = false
			}
		}
		// If allClauses is true, means all clauses are true for the current assignment
		if (allClauses) {
			isSat = true
		} else {
			// Get the next assignment and increment the assignment counter
			assignment = nextAssignment(assignment)
			counter = counter + 1
		}
	}
	let result = {
		'isSat': isSat,
		satisfyingAssignment: null
	}
	if (isSat) {
		result.satisfyingAssignment = assignment
	}
	if(last == 1){
		result.satisfyingAssignment = 'SpecificationProblemFound'
	}
	return result
}

// Receives the current assignment and produces the next one
function nextAssignment(currentAssignment) {
	let stop = false
	for (i = currentAssignment.length - 1; i >= 0 && !stop; i--) {
		// Verify if the last variable of the assignment is false,
		// if it is, change the value to true and stop the loop
		if (!currentAssignment[i]) {
			currentAssignment[i] = true
			stop = true
			// if it isn't, change the value to false and go to the previous variable
		} else {
			currentAssignment[i] = false
		}
	}
	return currentAssignment
}
